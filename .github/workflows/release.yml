name: Release

# Tag pushes (recommended) and manual runs (workflow_dispatch)
on:
  push:
    tags:
      - "*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Optional: tag to release (eg. 1.2.3). If empty the workflow will use <tool_version>."
        required: false
        default: ""
      release_name:
        description: "Optional: release name/title (defaults to '<tool_version>')."
        required: false
        default: ""
      draft:
        description: "Create release as draft? (true/false). Default: true."
        required: false
        default: "true"

permissions:
  contents: write

jobs:
  # Check if project wants building (looks for build script)
  check-build:
    name: Check if building is needed
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.meta.outputs.has_build_task }}
      tool_name: ${{ steps.meta.outputs.tool_name }}
      tool_version: ${{ steps.meta.outputs.tool_version }}
      entry: ${{ steps.meta.outputs.entry }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: 24
          cache: "npm"

      - name: Install dependencies
        run: npm install

      - id: meta
        name: Extract tool metadata
        run: |
          node tools/get-meta.ts >> "$GITHUB_OUTPUT"

      - name: Show build status
        run: |
          echo "Build enabled: ${{ steps.meta.outputs.has_build_task }}"
          if [ "${{ steps.meta.outputs.has_build_task }}" = "true" ]; then
            echo "Will build artifacts using 'npm run build'"
          else
            echo "Skipping build (no 'build' script found)"
          fi
        shell: bash

  build:
    name: Build artifacts
    needs: check-build
    if: needs.check-build.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false

    steps:
      - name: Checkout repo
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: 24
          cache: "npm"

      - name: Install dependencies
        run: npm install

      - name: Build with npm
        run: |
          set -e
          echo "Building artifact"
          npm run build
        shell: bash

      - name: Show artifact
        run: ls -la main.js || true
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          # artifact name identifies tool/version/target, so later we can find them easily
          name: ${{ needs.check-build.outputs.tool_name }}-${{ needs.check-build.outputs.tool_version }}
          path: |
            main.js
            manifest.json
            styles.css

  publish:
    name: Create (Draft) Release
    runs-on: ubuntu-latest
    needs: [check-build, build]
    if: always() && needs.check-build.result == 'success'
    steps:
      - name: Checkout (shallow)
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Download artifacts (if any were produced)
        if: needs.check-build.outputs.should_build == 'true' && needs.build.result == 'success'
        uses: actions/download-artifact@v4
        with:
          # download all artifacts uploaded by the build jobs of this run into ./artifacts/
          path: artifacts

      - name: Collect release files
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p release-files

          # Prefer freshly built artifacts if they were downloaded
          if [ -d artifacts ]; then
            shopt -s nullglob globstar
            for file in artifacts/**/main.js artifacts/**/manifest.json artifacts/**/styles.css; do
              cp "$file" release-files/
            done
            shopt -u nullglob globstar
          fi

          # Fall back to repository copies if build was skipped or specific files are missing
          for file in main.js manifest.json styles.css; do
            if [ -f "$file" ] && [ ! -f "release-files/$(basename "$file")" ]; then
              cp "$file" release-files/
            fi
          done

          echo "Collected files:"
          ls -la release-files || echo "(none)"

      - id: assets
        name: Prepare release asset list
        shell: bash
        run: |
          shopt -s nullglob
          files=(release-files/*)
          if [ ${#files[@]} -gt 0 ]; then
            joined=$(IFS=','; echo "${files[*]}")
            echo "paths=$joined" >> "$GITHUB_OUTPUT"
            echo "Prepared assets: $joined"
          else
            echo "paths=" >> "$GITHUB_OUTPUT"
            echo "No release files collected."
          fi
          shopt -u nullglob

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: 24
          cache: "npm"

      - name: Install dependencies
        run: npm install

      - id: meta
        name: Re-extract tool metadata
        run: |
          node tools/get-meta.ts >> "$GITHUB_OUTPUT"

      - id: determine-tag
        name: Determine tag to use for release
        shell: bash
        env:
          EVENT_NAME: ${{ github.event_name }}
          GITHUB_REF: ${{ github.ref }}
          INPUT_TAG: ${{ github.event.inputs.tag }}
          TOOL_VERSION: ${{ steps.meta.outputs.tool_version }}
        run: |
          # Priority:
          # 1) If pushed tag event -> use that tag name
          # 2) Else if workflow_dispatch input 'tag' provided -> use that
          # 3) Else fallback to v<tool_version>
          tag=""
          if [ "$EVENT_NAME" = "push" ] && [[ "$GITHUB_REF" =~ refs/tags/ ]]; then
            tag="${GITHUB_REF#refs/tags/}"
          elif [ -n "$INPUT_TAG" ] && [ "$INPUT_TAG" != "" ]; then
            tag="$INPUT_TAG"
          else
            tag="${TOOL_VERSION}"
          fi
          echo "tag=$tag" >> "$GITHUB_OUTPUT"

      - id: determine-draft
        name: Determine draft setting
        shell: bash
        env:
          INPUT_DRAFT: ${{ github.event.inputs.draft }}
        run: |
          # Default to true (draft) unless user explicitly passed 'false' as workflow_dispatch input
          draft="true"
          if [ -n "${INPUT_DRAFT:-}" ] && [ "${INPUT_DRAFT}" = "false" ]; then
            draft="false"
          fi
          echo "draft=$draft" >> "$GITHUB_OUTPUT"

      - id: changelog
        name: Extract CHANGELOG.md entry for version
        shell: bash
        env:
          TAG: ${{ steps.determine-tag.outputs.tag }}
        run: |
          ver="${TAG#v}"
          changelog=$(node tools/get-release-notes.ts "$ver")
          delimiter="EOF_$(uuidgen | tr -d '-')"
          echo "changelog<<${delimiter}" >> "$GITHUB_OUTPUT"
          echo "$changelog" >> "$GITHUB_OUTPUT"
          echo "${delimiter}" >> "$GITHUB_OUTPUT"

      - id: semver
        name: Check for pre-release
        shell: bash
        env:
          TAG: ${{ steps.determine-tag.outputs.tag }}
        run: |
          is_prerelease="false"
          if echo "$TAG" | grep -q "-"; then
            is_prerelease="true"
          fi
          echo "is_prerelease=$is_prerelease" >> "$GITHUB_OUTPUT"

      - name: Create Release (draft by default)
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.determine-tag.outputs.tag }}
          name: ${{ github.event.inputs.release_name != '' && github.event.inputs.release_name || steps.meta.outputs.tool_version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: ${{ steps.determine-draft.outputs.draft == 'true' }}
          prerelease: ${{ steps.semver.outputs.is_prerelease == 'true' }}
          artifacts: ${{ steps.assets.outputs.paths }}
          allowUpdates: true
          omitBodyDuringUpdate: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output release summary
        if: success()
        run: |
          echo "Release created (or updated). Check Releases page in GitHub."
          if [ "${{ needs.check-build.outputs.should_build }}" = "true" ]; then
            echo "Build artifacts attached."
          else
            echo "No build artifacts found (build script not found)."
          fi
